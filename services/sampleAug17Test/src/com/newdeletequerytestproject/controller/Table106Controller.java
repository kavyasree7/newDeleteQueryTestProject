/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newdeletequerytestproject.Table106;
import com.newdeletequerytestproject.service.Table106Service;


/**
 * Controller object for domain model class Table106.
 * @see Table106
 */
@RestController("sampleAug17Test.Table106Controller")
@Api(value = "Table106Controller", description = "Exposes APIs to work with Table106 resource.")
@RequestMapping("/sampleAug17Test/Table106")
public class Table106Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table106Controller.class);

    @Autowired
	@Qualifier("sampleAug17Test.Table106Service")
	private Table106Service table106Service;

	@ApiOperation(value = "Creates a new Table106 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table106 createTable106(@RequestBody Table106 table106) {
		LOGGER.debug("Create Table106 with information: {}" , table106);

		table106 = table106Service.create(table106);
		LOGGER.debug("Created Table106 with information: {}" , table106);

	    return table106;
	}

    @ApiOperation(value = "Returns the Table106 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table106 getTable106(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table106 with id: {}" , id);

        Table106 foundTable106 = table106Service.getById(id);
        LOGGER.debug("Table106 details with id: {}" , foundTable106);

        return foundTable106;
    }

    @ApiOperation(value = "Updates the Table106 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table106 editTable106(@PathVariable("id") String id, @RequestBody Table106 table106) throws EntityNotFoundException {
        LOGGER.debug("Editing Table106 with id: {}" , table106.getId());

        table106.setId(id);
        table106 = table106Service.update(table106);
        LOGGER.debug("Table106 details with id: {}" , table106);

        return table106;
    }

    @ApiOperation(value = "Deletes the Table106 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable106(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table106 with id: {}" , id);

        Table106 deletedTable106 = table106Service.delete(id);

        return deletedTable106 != null;
    }

    /**
     * @deprecated Use {@link #findTable106s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table106 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table106> searchTable106sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table106s list");
        return table106Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table106 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table106> findTable106s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table106s list");
        return table106Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table106 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table106> filterTable106s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table106s list");
        return table106Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable106s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table106Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table106 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable106s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table106s");
		return table106Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable106AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table106Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table106Service instance
	 */
	protected void setTable106Service(Table106Service service) {
		this.table106Service = service;
	}

}

