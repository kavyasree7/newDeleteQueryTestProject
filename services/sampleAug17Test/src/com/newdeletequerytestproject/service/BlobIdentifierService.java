/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newdeletequerytestproject.BlobIdentifier;

/**
 * Service object for domain model class {@link BlobIdentifier}.
 */
public interface BlobIdentifierService {

    /**
     * Creates a new BlobIdentifier. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BlobIdentifier if any.
     *
     * @param blobIdentifier Details of the BlobIdentifier to be created; value cannot be null.
     * @return The newly created BlobIdentifier.
     */
	BlobIdentifier create(@Valid BlobIdentifier blobIdentifier);


	/**
	 * Returns BlobIdentifier by given id if exists.
	 *
	 * @param blobidentifierId The id of the BlobIdentifier to get; value cannot be null.
	 * @return BlobIdentifier associated with the given blobidentifierId.
     * @throws EntityNotFoundException If no BlobIdentifier is found.
	 */
	BlobIdentifier getById(Integer blobidentifierId) throws EntityNotFoundException;

    /**
	 * Find and return the BlobIdentifier by given id if exists, returns null otherwise.
	 *
	 * @param blobidentifierId The id of the BlobIdentifier to get; value cannot be null.
	 * @return BlobIdentifier associated with the given blobidentifierId.
	 */
	BlobIdentifier findById(Integer blobidentifierId);


	/**
	 * Updates the details of an existing BlobIdentifier. It replaces all fields of the existing BlobIdentifier with the given blobIdentifier.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on BlobIdentifier if any.
     *
	 * @param blobIdentifier The details of the BlobIdentifier to be updated; value cannot be null.
	 * @return The updated BlobIdentifier.
	 * @throws EntityNotFoundException if no BlobIdentifier is found with given input.
	 */
	BlobIdentifier update(@Valid BlobIdentifier blobIdentifier) throws EntityNotFoundException;

    /**
	 * Deletes an existing BlobIdentifier with the given id.
	 *
	 * @param blobidentifierId The id of the BlobIdentifier to be deleted; value cannot be null.
	 * @return The deleted BlobIdentifier.
	 * @throws EntityNotFoundException if no BlobIdentifier found with the given id.
	 */
	BlobIdentifier delete(Integer blobidentifierId) throws EntityNotFoundException;

	/**
	 * Find all BlobIdentifiers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobIdentifiers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<BlobIdentifier> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all BlobIdentifiers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BlobIdentifiers.
     *
     * @see Pageable
     * @see Page
	 */
    Page<BlobIdentifier> findAll(String query, Pageable pageable);

    /**
	 * Exports all BlobIdentifiers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BlobIdentifiers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the BlobIdentifier.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

