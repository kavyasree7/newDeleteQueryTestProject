/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newdeletequerytestproject.BlobIdentifier;


/**
 * ServiceImpl object for domain model class BlobIdentifier.
 *
 * @see BlobIdentifier
 */
@Service("sampleAug17Test.BlobIdentifierService")
@Validated
public class BlobIdentifierServiceImpl implements BlobIdentifierService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobIdentifierServiceImpl.class);


    @Autowired
    @Qualifier("sampleAug17Test.BlobIdentifierDao")
    private WMGenericDao<BlobIdentifier, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BlobIdentifier, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
    @Override
	public BlobIdentifier create(BlobIdentifier blobIdentifier) {
        LOGGER.debug("Creating a new BlobIdentifier with information: {}", blobIdentifier);
        BlobIdentifier blobIdentifierCreated = this.wmGenericDao.create(blobIdentifier);
        return blobIdentifierCreated;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public BlobIdentifier getById(Integer blobidentifierId) throws EntityNotFoundException {
        LOGGER.debug("Finding BlobIdentifier by id: {}", blobidentifierId);
        BlobIdentifier blobIdentifier = this.wmGenericDao.findById(blobidentifierId);
        if (blobIdentifier == null){
            LOGGER.debug("No BlobIdentifier found with id: {}", blobidentifierId);
            throw new EntityNotFoundException(String.valueOf(blobidentifierId));
        }
        return blobIdentifier;
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public BlobIdentifier findById(Integer blobidentifierId) {
        LOGGER.debug("Finding BlobIdentifier by id: {}", blobidentifierId);
        return this.wmGenericDao.findById(blobidentifierId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "sampleAug17TestTransactionManager")
	@Override
	public BlobIdentifier update(BlobIdentifier blobIdentifier) throws EntityNotFoundException {
        LOGGER.debug("Updating BlobIdentifier with information: {}", blobIdentifier);
        this.wmGenericDao.update(blobIdentifier);

        Integer blobidentifierId = blobIdentifier.getId();

        return this.wmGenericDao.findById(blobidentifierId);
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
	@Override
	public BlobIdentifier delete(Integer blobidentifierId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BlobIdentifier with id: {}", blobidentifierId);
        BlobIdentifier deleted = this.wmGenericDao.findById(blobidentifierId);
        if (deleted == null) {
            LOGGER.debug("No BlobIdentifier found with id: {}", blobidentifierId);
            throw new EntityNotFoundException(String.valueOf(blobidentifierId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public Page<BlobIdentifier> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlobIdentifiers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Page<BlobIdentifier> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlobIdentifiers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sampleAug17Test for table BlobIdentifier to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

