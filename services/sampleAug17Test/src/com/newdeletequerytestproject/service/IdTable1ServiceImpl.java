/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newdeletequerytestproject.IdTable1;
import com.newdeletequerytestproject.IdTable1Id;


/**
 * ServiceImpl object for domain model class IdTable1.
 *
 * @see IdTable1
 */
@Service("sampleAug17Test.IdTable1Service")
@Validated
public class IdTable1ServiceImpl implements IdTable1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(IdTable1ServiceImpl.class);


    @Autowired
    @Qualifier("sampleAug17Test.IdTable1Dao")
    private WMGenericDao<IdTable1, IdTable1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IdTable1, IdTable1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
    @Override
	public IdTable1 create(IdTable1 idTable1) {
        LOGGER.debug("Creating a new IdTable1 with information: {}", idTable1);
        IdTable1 idTable1Created = this.wmGenericDao.create(idTable1);
        return idTable1Created;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public IdTable1 getById(IdTable1Id idtable1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding IdTable1 by id: {}", idtable1Id);
        IdTable1 idTable1 = this.wmGenericDao.findById(idtable1Id);
        if (idTable1 == null){
            LOGGER.debug("No IdTable1 found with id: {}", idtable1Id);
            throw new EntityNotFoundException(String.valueOf(idtable1Id));
        }
        return idTable1;
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public IdTable1 findById(IdTable1Id idtable1Id) {
        LOGGER.debug("Finding IdTable1 by id: {}", idtable1Id);
        return this.wmGenericDao.findById(idtable1Id);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public IdTable1 getByColumn4(Integer column4) {
        Map<String, Object> column4Map = new HashMap<>();
        column4Map.put("column4", column4);

        LOGGER.debug("Finding IdTable1 by unique keys: {}", column4Map);
        IdTable1 idTable1 = this.wmGenericDao.findByUniqueKey(column4Map);

        if (idTable1 == null){
            LOGGER.debug("No IdTable1 found with given unique key values: {}", column4Map);
            throw new EntityNotFoundException(String.valueOf(column4Map));
        }

        return idTable1;
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public IdTable1 getByColumn4AndColumn3(Integer column4, long column3) {
        Map<String, Object> column4AndColumn3Map = new HashMap<>();
        column4AndColumn3Map.put("column4", column4);
        column4AndColumn3Map.put("column3", column3);

        LOGGER.debug("Finding IdTable1 by unique keys: {}", column4AndColumn3Map);
        IdTable1 idTable1 = this.wmGenericDao.findByUniqueKey(column4AndColumn3Map);

        if (idTable1 == null){
            LOGGER.debug("No IdTable1 found with given unique key values: {}", column4AndColumn3Map);
            throw new EntityNotFoundException(String.valueOf(column4AndColumn3Map));
        }

        return idTable1;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "sampleAug17TestTransactionManager")
	@Override
	public IdTable1 update(IdTable1 idTable1) throws EntityNotFoundException {
        LOGGER.debug("Updating IdTable1 with information: {}", idTable1);
        this.wmGenericDao.update(idTable1);

        IdTable1Id idtable1Id = new IdTable1Id();
        idtable1Id.setId(idTable1.getId());
        idtable1Id.setColumn3(idTable1.getColumn3());
        idtable1Id.setColumn2(idTable1.getColumn2());
        idtable1Id.setColumn4(idTable1.getColumn4());
        idtable1Id.setColumn5(idTable1.getColumn5());

        return this.wmGenericDao.findById(idtable1Id);
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
	@Override
	public IdTable1 delete(IdTable1Id idtable1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IdTable1 with id: {}", idtable1Id);
        IdTable1 deleted = this.wmGenericDao.findById(idtable1Id);
        if (deleted == null) {
            LOGGER.debug("No IdTable1 found with id: {}", idtable1Id);
            throw new EntityNotFoundException(String.valueOf(idtable1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public Page<IdTable1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IdTable1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Page<IdTable1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IdTable1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sampleAug17Test for table IdTable1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

