/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newdeletequerytestproject.Table106;


/**
 * ServiceImpl object for domain model class Table106.
 *
 * @see Table106
 */
@Service("sampleAug17Test.Table106Service")
@Validated
public class Table106ServiceImpl implements Table106Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table106ServiceImpl.class);


    @Autowired
    @Qualifier("sampleAug17Test.Table106Dao")
    private WMGenericDao<Table106, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table106, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
    @Override
	public Table106 create(Table106 table106) {
        LOGGER.debug("Creating a new Table106 with information: {}", table106);
        Table106 table106Created = this.wmGenericDao.create(table106);
        return table106Created;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public Table106 getById(String table106Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table106 by id: {}", table106Id);
        Table106 table106 = this.wmGenericDao.findById(table106Id);
        if (table106 == null){
            LOGGER.debug("No Table106 found with id: {}", table106Id);
            throw new EntityNotFoundException(String.valueOf(table106Id));
        }
        return table106;
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public Table106 findById(String table106Id) {
        LOGGER.debug("Finding Table106 by id: {}", table106Id);
        return this.wmGenericDao.findById(table106Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "sampleAug17TestTransactionManager")
	@Override
	public Table106 update(Table106 table106) throws EntityNotFoundException {
        LOGGER.debug("Updating Table106 with information: {}", table106);
        this.wmGenericDao.update(table106);

        String table106Id = table106.getId();

        return this.wmGenericDao.findById(table106Id);
    }

    @Transactional(value = "sampleAug17TestTransactionManager")
	@Override
	public Table106 delete(String table106Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table106 with id: {}", table106Id);
        Table106 deleted = this.wmGenericDao.findById(table106Id);
        if (deleted == null) {
            LOGGER.debug("No Table106 found with id: {}", table106Id);
            throw new EntityNotFoundException(String.valueOf(table106Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public Page<Table106> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table106s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Page<Table106> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table106s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sampleAug17Test for table Table106 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sampleAug17TestTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

