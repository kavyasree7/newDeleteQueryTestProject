/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newdeletequerytestproject.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newdeletequerytestproject.IdTable1;
import com.newdeletequerytestproject.IdTable1Id;

/**
 * Service object for domain model class {@link IdTable1}.
 */
public interface IdTable1Service {

    /**
     * Creates a new IdTable1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IdTable1 if any.
     *
     * @param idTable1 Details of the IdTable1 to be created; value cannot be null.
     * @return The newly created IdTable1.
     */
	IdTable1 create(@Valid IdTable1 idTable1);


	/**
	 * Returns IdTable1 by given id if exists.
	 *
	 * @param idtable1Id The id of the IdTable1 to get; value cannot be null.
	 * @return IdTable1 associated with the given idtable1Id.
     * @throws EntityNotFoundException If no IdTable1 is found.
	 */
	IdTable1 getById(IdTable1Id idtable1Id) throws EntityNotFoundException;

    /**
	 * Find and return the IdTable1 by given id if exists, returns null otherwise.
	 *
	 * @param idtable1Id The id of the IdTable1 to get; value cannot be null.
	 * @return IdTable1 associated with the given idtable1Id.
	 */
	IdTable1 findById(IdTable1Id idtable1Id);

    /**
	 * Find and return the IdTable1 for given column4  if exists.
	 *
	 * @param column4 value of column4; value cannot be null.
	 * @return IdTable1 associated with the given inputs.
     * @throws EntityNotFoundException if no matching IdTable1 found.
	 */
    IdTable1 getByColumn4(Integer column4)throws EntityNotFoundException;

    /**
	 * Find and return the IdTable1 for given column4  andcolumn3  if exists.
	 *
	 * @param column4 value of column4; value cannot be null.
	 * @param column3 value of column3; value cannot be null.
	 * @return IdTable1 associated with the given inputs.
     * @throws EntityNotFoundException if no matching IdTable1 found.
	 */
    IdTable1 getByColumn4AndColumn3(Integer column4, long column3)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing IdTable1. It replaces all fields of the existing IdTable1 with the given idTable1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on IdTable1 if any.
     *
	 * @param idTable1 The details of the IdTable1 to be updated; value cannot be null.
	 * @return The updated IdTable1.
	 * @throws EntityNotFoundException if no IdTable1 is found with given input.
	 */
	IdTable1 update(@Valid IdTable1 idTable1) throws EntityNotFoundException;

    /**
	 * Deletes an existing IdTable1 with the given id.
	 *
	 * @param idtable1Id The id of the IdTable1 to be deleted; value cannot be null.
	 * @return The deleted IdTable1.
	 * @throws EntityNotFoundException if no IdTable1 found with the given id.
	 */
	IdTable1 delete(IdTable1Id idtable1Id) throws EntityNotFoundException;

	/**
	 * Find all IdTable1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IdTable1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<IdTable1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all IdTable1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IdTable1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<IdTable1> findAll(String query, Pageable pageable);

    /**
	 * Exports all IdTable1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the IdTable1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the IdTable1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

